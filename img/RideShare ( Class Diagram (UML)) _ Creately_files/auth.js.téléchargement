/**
 * This component manages Graivty Authentication for all necessary
 * functionality in the site.
 * 
 * Contain functionality to handle gravity client library functions,
 * this will be accessible on the browser global scope.
 */
window.gravityAuth = (function () {

    var isBootstrapped = false;
    
    /**
     * Bootstraps gravity if not already done.
     */
    var bootstrap = function(){
        if( !isBootstrapped ){
            //Setup the gravity widgets
            gravity.bootstrap( 'gravity-placeholder' );
            isBootstrapped = true;
        }
    }

    /**
     * Retuns the current host and protocol
     * part of the URL
     */
    var currentHost = function(){
        return gravity.client.getCreatelyHome();
    }

    /**
     * Show gravity signup widget
     */
    var showGravitySignUp = function () {
        gravity.widget.show();
        gravity.widget.showSignUp();
    };

    /**
     * Show gravity signin widget
     */
    var showGravitySignIn = function () {
        gravity.widget.show();
        gravity.widget.showSignIn();
    };

    /**
     * Removes the given cookie.
     * @param name is the name of the cookie
     */
    var removeCookie = function( name ){
        document.cookie = name + '=; path=/; domain=' + gravity.client.getCookieDomain() + '; expires=' + new Date(0).toUTCString();
    }

    /**
     * returns true if the demo cookie is 
     * available.
     */
    var hasDemoCookie = function(){
        return document.cookie.indexOf('creately_demo') >= 0;
    } 

    /**
     * Remove creately demo cookie and JSESSIONID cookie.
     */
    var removeSessionCookies = function(){
        removeCookie( 'creately_demo' );
        removeCookie( 'JSESSIONID' );
    }

    /**
     * Remove current Drupal session in user logout.
     * If left the session as it is, boost caching interfere with authenticated users.
     */
    var removeDrupalSessionCookie = function() {
        /**
         * Define name of the Drupal session cookie.
         * Session cookie name is generated by concatanating 
         * SESS + md5(cookie domain on setting file)
         */
        var DRUPAL_SESSION_COOKIE_NAME = 'SESS9f180724c55cd2f1a2dca2997f588020';

        removeCookie( DRUPAL_SESSION_COOKIE_NAME );
    }
    
    /**
     * Go to plans page
     */
    var goToPlans = function () {
        window.location = currentHost() + '/plans';
    };

    /**
     * Get user data and record login and signup events to mixpanel.
     */
    var recordLoginSignup = function( type, callback ) {

       var location = hasDemoCookie() ? 'demo' : '';

        httpGetRequest( currentHost() + '/gravityauth/set-new-user-session', function( status, response ){
            if( status == 200 ) {

                httpGetRequest( currentHost() + '/gravityauth/get-user-data', function( status, response ){
                    if( status == 200 && response != 'false' ) {

                        var data = JSON.parse( response );
                        data['location'] = location;

                        // First call record to mixpanel function,
                        // record to ga function pass as callback function
                        recordToMixpanel( type, data, function(){
                            recordToGA( type, data, callback);
                        });
                    } else {
                        console.error( 'Error occured in get user data: ' + status );
                        callback & callback();
                    }
                });
            } else {
                console.error( 'Error occured in set new user session: ' + status );
                callback && callback();
            }
        });
    }

    /**
     * Record login & signup events to mixpanel
     */
    var recordToMixpanel = function( type, data, callback ) {

        if( typeof MixpanelTracker === 'object' ) {

            if( type == 'TYPE_SIGNUP' ){ 
                MixpanelTracker.trackSignup( data['email'], data['provider'], 'success', data['location'], data['first_name'], data['last_name'], data['created_date'], callback );
            } else { 
                MixpanelTracker.trackLogin( data['email'], data['provider'], 'success', data['plan_type'], data['plan_team_size'], data['location'], callback );
            }
        } else {
            callback && callback();
        }
    }

    /**
     * Record login & signup events to google analytics
     */
    var recordToGA = function( type, data, callback ) {

        if( typeof gaTracker === 'object' ) {

            if( type == 'TYPE_SIGNUP' ){
                gaTracker.trackSignup( data['provider'], data['location'], callback );
            } else {
                gaTracker.trackLogin( data['provider'], data['plan_type'], data['plan_team_size'], data['email'], data['location'], callback );
            }
        } else {
            callback && callback();
        }
    }

    /**
     * This function will be called on sign in success
     * @param status is user status
     */
    var onSignInSuccess = function( status ){

        switch ( status ) {
            case 2:
                // if response status 2, redirect user to team confirm page
                window.location = currentHost() + '/account/team/confirm';
                break;
            case 3:
                // If response status 3, redirect user to payment pending page
                window.location = currentHost() + '/account/renew/subscription';
                break;
            default:
                return true;
        }

        return false;
    }

    /**
     * When login or registration done record to mixpanel & google analytics,
     * remove session cookies and hide the gravity widget.
     */
    var recordSuccess = function( type, callback ){
        // Record login/signup to mixpanel & google analytics
        recordLoginSignup( type, callback );

        removeSessionCookies();
    }

    /**
     * Hide install to chrome option when the extension 
     * is installed from Chrome Web Store.
     */
    var chromeExtensionCallback = function() {

        document.getElementById( 'install-chrome' ).style.display = 'none';
	    this.recordChromeExtensionEvent( 'installed', 'Success Widget' );
    }

    /**
     * Show chrome extension install button in chrome
     * browsers when it has not been installed.
     */
    var showChromeExtensionButton = function( self ) {
        
        if ( /Chrome/.test(navigator.userAgent) && /Google/.test(navigator.vendor) ) {
            if ( !chrome.app.isInstalled) {
                document.getElementById( 'install-chrome' ).style.display = 'block';
                self.recordChromeExtensionEvent( 'load', 'Success Widget' );
            }
        }
    }

    /**
     * Show loading spinner
     * @param widgetId is the id of the particular widget which needs to show the loading spinner
     */
    var showSpinner = function( widgetId ) {
        if( document.getElementById && document.getElementsByClassName ){
            document.getElementById( widgetId ).getElementsByClassName('loading-spinner')[0].style.visibility = 'visible';
        }
    }

    /**
     * Hide loading spinner
     * @param widgetId is the id of the particular widget which needs to show the loading spinner
     */
    var hideSpinner = function( widgetId ) {
        if( document.getElementById && document.getElementsByClassName ){
            document.getElementById( widgetId ).getElementsByClassName('loading-spinner')[0].style.visibility = 'hidden';
        }
    }

    return {
        
        /**
         * User action types
         * This will be used to identify which gravity client widget to be shown.
         */
        TYPE_LOGIN: 'TYPE_LOGIN',
        TYPE_SIGNUP: 'TYPE_SIGNUP',
        
        /**
         * Success actions
         * This will be used to identify which action needed to be triggered on success callback.
         */
        SUCCESS_ACTION_DEFAULT: 1,
        SUCCESS_ACTION_RELOAD: 2,

        /**
         * Show signin/signup widget
         * Handle signin and signup success callbacks
         * @param action indicates one of TYPE_LOGIN or TYPE_SIGNUP
         * @param onSuccess is a constant defined by starting SUCCESS_ or a callback
         *      function to be executed when the login/registration is successful.
         * @param onClose is a callback that will be called when the widget is manually closed.
         */
        show: function( action, onSuccess, onClose ) {

            bootstrap();
            
            var onSuccess = onSuccess ? onSuccess: this.SUCCESS_ACTION_DEFAULT;
            var self = this;

            /**
             * Gravity signin success callback
             * @param status
             */
            gravity.signInWidget.successCallback = function ( status ) {

                showSpinner( 'gravity-signin-widget' );

                recordSuccess( 'TYPE_LOGIN', function() {

                    hideSpinner( 'gravity-signin-widget' );

                    // Hide gravity widget
                    gravity.widget.hide();

                    if( onSignInSuccess( status ) ){
                        if ( onSuccess === self.SUCCESS_ACTION_DEFAULT ) {
                            createlyWidgets.show('success-popup');
                            showChromeExtensionButton( self );

                        } else if ( onSuccess === self.SUCCESS_ACTION_RELOAD ) {
                            window.location.reload();

                        } else {
                            onSuccess('TYPE_LOGIN');
                        }
                    }
                });
            };

            /**
             * Gravity signup and signin failure callback
             * @param status
             */
            gravity.signUpWidget.failureCallback = gravity.signInWidget.failureCallback = function( status ){
                if( status == 0 && onClose ){
                    onClose();
                }
            }

            /**
             * Gravity signup success callback
             * @param status
             */
            gravity.signUpWidget.successCallback = function ( status ) {

                showSpinner( 'gravity-signup-widget' );

                recordSuccess( 'TYPE_SIGNUP', function() {

                    hideSpinner( 'gravity-signup-widget' );
                    
                    // Hide gravity widget
                    gravity.widget.hide();
                    
                    if ( onSuccess === self.SUCCESS_ACTION_DEFAULT ) {
                        goToPlans();
                    } else if( onSuccess === self.SUCCESS_ACTION_RELOAD ) {
                        window.location.reload();
                    } else {
                        onSuccess('TYPE_SIGNUP');
                    }
                });
            };

            // Show signin/signup widget
            if( action === self.TYPE_LOGIN ) {
                showGravitySignIn();

            } else if( action === self.TYPE_SIGNUP ) {
                showGravitySignUp();
            }
        },

        /**
         * Logout users
         * Call gravity logout function,
         * remove creately_demo and JSESSIONID cookies,
         * then redirect user to home page
         */
         logOutUser: function() {
            
            // Call gravity client logout function, this will remove gravity token
            gravity.client.logOut();
            
            // Remove creately demo and JSESSIONID cookies
            removeSessionCookies();

            // Remove current Drupal session
            removeDrupalSessionCookie();

            // User redirect to home page
            window.location = '/';
        },

        /**
         * Install chrome extension, and record button click event
         * in google analytics
         */
        installChromeExtension: function() {

            // Define the Creately chrome extension url
            var CREATELY_CHROME_EXTENSION_URL = 'https://chrome.google.com/webstore/detail/mehmcgkakgfcibfkeofncglipefjcfnn';

            chrome.webstore.install( CREATELY_CHROME_EXTENSION_URL, chromeExtensionCallback );

            this.recordChromeExtensionEvent( 'click', 'Success Widget' );
        },

        /**
         * Record chrome extension event on google analytics.
         * @param action can be load, click or installed
         * @param label can either Success Widget or Alert Bar
         */
        recordChromeExtensionEvent: function( action, label ) {
            
            // Check ga availability
            if( window.ga ){	
                ga( 'send', 'event', 'Chrome Alert', action, label );	
            }
        },
		
        /**
         * This function returns true when the application is being accessed 
         * in demo mode. The basis for the check is the presence of creately
         * demo cookie.
         */
		isDemoUser : function () {			
			return hasDemoCookie();
		},
        
        /**
         * This function calls recordSuccess
         */
        recordRegisterSuccess: function() {
            recordSuccess( 'TYPE_SIGNUP' );
        },
    };


})();